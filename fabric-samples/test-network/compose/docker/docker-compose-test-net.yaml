# This file is used to define and configure the network components necessary for a Hyperledger Fabric test network. It specifies the Docker containers that will run the Fabric peer nodes, orderer nodes, and other necessary services for the network to function. The configuration includes:

version: '3.7'

volumes:
  orderer.example.com:
  orderer2.example.com:
  orderer3.example.com:
  orderer4.example.com:

  # OEM Organization
  QA1.1.oem.example.com.msp:
  QA1.1.oem.example.com.tls:
  QA1.1.oem.example.com.data:
  SW1.2.oem.example.com.msp:
  SW1.2.oem.example.com.tls:
  SW1.2.oem.example.com.data:
  SW1.3.oem.example.com.msp:
  SW1.3.oem.example.com.tls:
  SW1.3.oem.example.com.data:
  # Supplier Organization
  QA2.1.supplier.example.com.msp:
  QA2.1.supplier.example.com.tls:
  QA2.1.supplier.example.com.data:
  # Airline Organization
  QA3.1.airline.example.com.msp:
  QA3.1.airline.example.com.tls:
  QA3.1.airline.example.com.data:
networks:
  test:
    name: fabric_test

services:

  orderer.example.com:
    container_name: orderer.example.com
    image: hyperledger/fabric-orderer:latest
    labels:
      service: hyperledger-fabric
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7050
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_GENERAL_BOOTSTRAPMETHOD=none
      - ORDERER_CHANNELPARTICIPATION_ENABLED=true
      - ORDERER_ADMIN_TLS_ENABLED=true
      - ORDERER_ADMIN_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_ADMIN_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_ADMIN_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_ADMIN_TLS_CLIENTROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_ADMIN_LISTENADDRESS=0.0.0.0:7053
      - ORDERER_OPERATIONS_LISTENADDRESS=orderer.example.com:9443
      - ORDERER_METRICS_PROVIDER=prometheus
    working_dir: /root
    command: orderer
    volumes:
      - ../organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/var/hyperledger/orderer/msp
      - ../organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/:/var/hyperledger/orderer/tls
      - orderer.example.com:/var/hyperledger/production/orderer
    ports:
      - 7050:7050
      - 7053:7053
      - 9443:9443
    networks:
      - test

  orderer2.example.com:
    container_name: orderer2.example.com
    image: hyperledger/fabric-orderer:latest
    labels:
      service: hyperledger-fabric
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7052
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_GENERAL_BOOTSTRAPMETHOD=none
      - ORDERER_CHANNELPARTICIPATION_ENABLED=true
      - ORDERER_ADMIN_TLS_ENABLED=true
      - ORDERER_ADMIN_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_ADMIN_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_ADMIN_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_ADMIN_TLS_CLIENTROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_ADMIN_LISTENADDRESS=0.0.0.0:7055
      - ORDERER_OPERATIONS_LISTENADDRESS=orderer2.example.com:9446
      - ORDERER_METRICS_PROVIDER=prometheus
    working_dir: /root
    command: orderer
    volumes:
      - ../organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/msp:/var/hyperledger/orderer/msp
      - ../organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/:/var/hyperledger/orderer/tls
      - orderer2.example.com:/var/hyperledger/production/orderer
    ports:
      - 7052:7052
      - 7055:7055
      - 9446:9446
    networks:
      - test

  orderer3.example.com:
    container_name: orderer3.example.com
    image: hyperledger/fabric-orderer:latest
    labels:
      service: hyperledger-fabric
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7056
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_GENERAL_BOOTSTRAPMETHOD=none
      - ORDERER_CHANNELPARTICIPATION_ENABLED=true
      - ORDERER_ADMIN_TLS_ENABLED=true
      - ORDERER_ADMIN_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_ADMIN_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_ADMIN_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_ADMIN_TLS_CLIENTROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_ADMIN_LISTENADDRESS=0.0.0.0:7057
      - ORDERER_OPERATIONS_LISTENADDRESS=orderer3.example.com:9447
      - ORDERER_METRICS_PROVIDER=prometheus
    working_dir: /root
    command: orderer
    volumes:
      - ../organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/msp:/var/hyperledger/orderer/msp
      - ../organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/:/var/hyperledger/orderer/tls
      - orderer3.example.com:/var/hyperledger/production/orderer
    ports:
      - 7056:7056
      - 7057:7057
      - 9447:9447
    networks:
      - test

  orderer4.example.com:
    container_name: orderer4.example.com
    image: hyperledger/fabric-orderer:latest
    labels:
      service: hyperledger-fabric
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7058
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_GENERAL_BOOTSTRAPMETHOD=none
      - ORDERER_CHANNELPARTICIPATION_ENABLED=true
      - ORDERER_ADMIN_TLS_ENABLED=true
      - ORDERER_ADMIN_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_ADMIN_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_ADMIN_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_ADMIN_TLS_CLIENTROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_ADMIN_LISTENADDRESS=0.0.0.0:7059
      - ORDERER_OPERATIONS_LISTENADDRESS=orderer4.example.com:9448
      - ORDERER_METRICS_PROVIDER=prometheus
    working_dir: /root
    command: orderer
    volumes:
      - ../organizations/ordererOrganizations/example.com/orderers/orderer4.example.com/msp:/var/hyperledger/orderer/msp
      - ../organizations/ordererOrganizations/example.com/orderers/orderer4.example.com/tls/:/var/hyperledger/orderer/tls
      - orderer4.example.com:/var/hyperledger/production/orderer
    ports:
      - 7058:7058
      - 7059:7059
      - 9448:9448
    networks:
      - test
### SIGRId
  QA1.1.oem.example.com:
    container_name: QA1.1.oem.example.com
    image: hyperledger/fabric-peer:latest
    environment:
      - FABRIC_CFG_PATH=/etc/hyperledger/peercfg
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_ID=QA1.1.oem.example.com
      - CORE_PEER_ADDRESS=QA1.1.oem.example.com:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=QA1.1.oem.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=QA1.1.oem.example.com:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=QA1.1.oem.example.com:7051
      - CORE_PEER_LOCALMSPID=OEMMSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/msp
      - CORE_OPERATIONS_LISTENADDRESS=QA1.1.oem.example.com:9443
      - CORE_METRICS_PROVIDER=prometheus
      - CHAINCODE_AS_A_SERVICE_BUILDER_CONFIG={"peername":"QA1.1oem"}
      - CORE_CHAINCODE_EXECUTETIMEOUT=300s
    volumes:
      - QA1.1.oem.example.com.msp:/etc/hyperledger/fabric/msp
      - QA1.1.oem.example.com.tls:/etc/hyperledger/fabric/tls
      - QA1.1.oem.example.com.data:/var/hyperledger/production
    networks:
      - test

  SW1.2.oem.example.com:
      container_name: SW1.2.oem.example.com
      image: hyperledger/fabric-peer:latest
      environment:
        - FABRIC_CFG_PATH=/etc/hyperledger/peercfg
        - FABRIC_LOGGING_SPEC=INFO
        - CORE_PEER_TLS_ENABLED=true
        - CORE_PEER_PROFILE_ENABLED=false
        - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
        - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
        - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
        - CORE_PEER_ID=SW1.2.oem.example.com
        - CORE_PEER_ADDRESS=SW1.2.oem.example.com:8051
        - CORE_PEER_LISTENADDRESS=0.0.0.0:8051
        - CORE_PEER_CHAINCODEADDRESS=SW1.2.oem.example.com:8052
        - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8052
        - CORE_PEER_GOSSIP_EXTERNALENDPOINT=SW1.2.oem.example.com:8051
        - CORE_PEER_GOSSIP_BOOTSTRAP=SW1.2.oem.example.com:8051
        - CORE_PEER_LOCALMSPID=OEMMSP
        - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/msp
        - CORE_OPERATIONS_LISTENADDRESS=SW1.2.oem.example.com:9444
        - CORE_METRICS_PROVIDER=prometheus
        - CHAINCODE_AS_A_SERVICE_BUILDER_CONFIG={"peername":"SW1.2oem"}
        - CORE_CHAINCODE_EXECUTETIMEOUT=300s
      volumes:
        - SW1.2.oem.example.com.msp:/etc/hyperledger/fabric/msp
        - SW1.2.oem.example.com.tls:/etc/hyperledger/fabric/tls
        - SW1.2.oem.example.com.data:/var/hyperledger/production
      networks:
        - test

        
  SW1.3.oem.example.com:
    container_name: SW1.3.oem.example.com
    image: hyperledger/fabric-peer:latest
    environment:
      - FABRIC_CFG_PATH=/etc/hyperledger/peercfg
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_ID=SW1.3.oem.example.com
      - CORE_PEER_ADDRESS=SW1.3.oem.example.com:9051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:9051
      - CORE_PEER_CHAINCODEADDRESS=SW1.3.oem.example.com:9052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=SW1.3.oem.example.com:9051
      - CORE_PEER_GOSSIP_BOOTSTRAP=SW1.3.oem.example.com:9051
      - CORE_PEER_LOCALMSPID=OEMMSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/msp
      - CORE_OPERATIONS_LISTENADDRESS=SW1.3.oem.example.com:9445
      - CORE_METRICS_PROVIDER=prometheus
      - CHAINCODE_AS_A_SERVICE_BUILDER_CONFIG={"peername":"SW1.3oem"}
      - CORE_CHAINCODE_EXECUTETIMEOUT=300s
    volumes:
      - SW1.3.oem.example.com.msp:/etc/hyperledger/fabric/msp
      - SW1.3.oem.example.com.tls:/etc/hyperledger/fabric/tls
      - SW1.3.oem.example.com.data:/var/hyperledger/production
    networks:
      - test

  QA2.1.supplier.example.com:
    container_name: QA2.1.supplier.example.com
    image: hyperledger/fabric-peer:latest
    environment:
      - FABRIC_CFG_PATH=/etc/hyperledger/peercfg
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_ID=QA2.1.supplier.example.com
      - CORE_PEER_ADDRESS=QA2.1.supplier.example.com:10051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:10051
      - CORE_PEER_CHAINCODEADDRESS=QA2.1.supplier.example.com:10052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:10052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=QA2.1.supplier.example.com:10051
      - CORE_PEER_GOSSIP_BOOTSTRAP=QA2.1.supplier.example.com:10051
      - CORE_PEER_LOCALMSPID=SupplierMSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/msp
      - CORE_OPERATIONS_LISTENADDRESS=QA2.1.supplier.example.com:9446
      - CORE_METRICS_PROVIDER=prometheus
      - CHAINCODE_AS_A_SERVICE_BUILDER_CONFIG={"peername":"QA2.1supplier"}
      - CORE_CHAINCODE_EXECUTETIMEOUT=300s
    volumes:
      - QA2.1.supplier.example.com.msp:/etc/hyperledger/fabric/msp
      - QA2.1.supplier.example.com.tls:/etc/hyperledger/fabric/tls
      - QA2.1.supplier.example.com.data:/var/hyperledger/production
    networks:
      - test

  QA3.1.airline.example.com:
    container_name: QA3.1.airline.example.com
    image: hyperledger/fabric-peer:latest
    environment:
      - FABRIC_CFG_PATH=/etc/hyperledger/peercfg
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_ID=QA3.1.airline.example.com
      - CORE_PEER_ADDRESS=QA3.1.airline.example.com:11051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:11051
      - CORE_PEER_CHAINCODEADDRESS=QA3.1.airline.example.com:11052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:11052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=QA3.1.airline.example.com:11051
      - CORE_PEER_GOSSIP_BOOTSTRAP=QA3.1.airline.example.com:11051
      - CORE_PEER_LOCALMSPID=AirlineMSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/msp
      - CORE_OPERATIONS_LISTENADDRESS=QA3.1.airline.example.com:9447
      - CORE_METRICS_PROVIDER=prometheus
      - CHAINCODE_AS_A_SERVICE_BUILDER_CONFIG={"peername":"QA3.1airline"}
      - CORE_CHAINCODE_EXECUTETIMEOUT=300s
    volumes:
      - QA3.1.airline.example.com.msp:/etc/hyperledger/fabric/msp
      - QA3.1.airline.example.com.tls:/etc/hyperledger/fabric/tls
      - QA3.1.airline.example.com.data:/var/hyperledger/production
    networks:
      - test






# # Peer Services: Defines the peer nodes for the organizations in the network. For example, peer0.org1.example.com and peer0.org2.example.com are defined as peers for two different organizations. Each peer service configuration includes the Docker image to use (hyperledger/fabric-peer:latest), environment variables to configure the peer, and volumes for data persistence and configuration.
# # Volumes: Specifies the directories on the host that are mounted into the containers. This is used for configuration files and to ensure data persistence across container restarts.
# # Network Settings: Defines the Docker network settings, such as the network mode, to ensure that all containers can communicate with each other.
# version: '3.7'
# services:
#   # OEM Organization Peers
#   QA1.1.oem.example.com:
#     container_name: QA1.1.oem.example.com
#     image: hyperledger/fabric-peer:latest
#     environment:
#       - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
#       - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric_test
#     volumes:
#       - ./docker/peercfg:/etc/hyperledger/peercfg
#       - ${DOCKER_SOCK}:/host/var/run/docker.sock

#   QA1.2.oem.example.com:
#     container_name: QA1.2.oem.example.com
#     image: hyperledger/fabric-peer:latest
#     environment:
#       - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
#       - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric_test
#     volumes:
#       - ./docker/peercfg:/etc/hyperledger/peercfg
#       - ${DOCKER_SOCK}:/host/var/run/docker.sock

#   SW1.1.oem.example.com:
#     container_name: SW1.1.oem.example.com
#     image: hyperledger/fabric-peer:latest
#     environment:
#       - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
#       - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric_test
#     volumes:
#       - ./docker/peercfg:/etc/hyperledger/peercfg
#       - ${DOCKER_SOCK}:/host/var/run/docker.sock

#   SW1.2.oem.example.com:
#     container_name: SW1.2.oem.example.com
#     image: hyperledger/fabric-peer:latest
#     environment:
#       - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
#       - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric_test
#     volumes:
#       - ./docker/peercfg:/etc/hyperledger/peercfg
#       - ${DOCKER_SOCK}:/host/var/run/docker.sock

#   SW1.3.oem.example.com:
#     container_name: SW1.3.oem.example.com
#     image: hyperledger/fabric-peer:latest
#     environment:
#       - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
#       - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric_test
#     volumes:
#       - ./docker/peercfg:/etc/hyperledger/peercfg
#       - ${DOCKER_SOCK}:/host/var/run/docker.sock

#   # Supplier Organization Peer
#   QA2.1.supplier.example.com:
#     container_name: QA2.1.supplier.example.com
#     image: hyperledger/fabric-peer:latest
#     environment:
#       - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
#       - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric_test
#     volumes:
#       - ./docker/peercfg:/etc/hyperledger/peercfg
#       - ${DOCKER_SOCK}:/host/var/run/docker.sock

#   # Airline Organization Peer
#   QA3.1.airline.example.com:
#     container_name: QA3.1.airline.example.com
#     image: hyperledger/fabric-peer:latest
#     environment:
#       - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
#       - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric_test
#     volumes:
#       - ./docker/peercfg:/etc/hyperledger/peercfg
#       - ${DOCKER_SOCK}:/host/var/run/docker.sock

  # CLI container for operations
  cli:
    container_name: cli
    image: hyperledger/fabric-tools:latest
    tty: true
    stdin_open: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - FABRIC_LOGGING_SPEC=INFO
    volumes:
      - /var/run/:/host/var/run/
      - ./chaincode:/opt/gopath/src/github.com/hyperledger/fabric-samples/chaincode
      - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
      - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric-samples/scripts
      - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric-samples/channel-artifacts


#Labels
#Purpose: Labels in Docker are key-value pairs attached to objects such as containers, images, volumes, etc. They serve as a way to organize, categorize, and apply metadata that can be used for filtering and management purposes.
# Absence in Some Services: The absence of labels like service: hyperledger-fabric in certain parts of the Docker Compose file doesn't impact the functionality of the network. Labels are optional and are used for specific purposes, such as simplifying the management of Docker objects or for use with Docker Swarm for service discovery and orchestration. In the context of the Hyperledger Fabric test network, labels might be used for organizational purposes but are not strictly necessary for the network's operation.
# Volumes
# Purpose: Volumes are used in Docker to persist data generated by and used by Docker containers. In the context of Hyperledger Fabric, volumes are crucial for several reasons:
# Persistence: They ensure that important data such as blockchain ledger data, chaincode (smart contracts), and cryptographic material remains intact across container restarts.
# Security: By storing cryptographic material and other sensitive data in volumes, it helps in isolating and protecting this data.
# Configuration and Data Sharing: Volumes are used to share configuration files and other necessary data between the host and containers or among containers themselves. This is essential for setting up the network configuration, MSP (Membership Service Provider) data, and chaincode.
# Multiple Volumes: Each service in the Docker Compose file, such as peers, orderers, and CLI tools, requires access to different sets of data and configurations. This necessitates defining multiple volumes. For example:
# Orderer and Peer Nodes: Need access to their MSP data for identity and access control, ledger data for the blockchain state, and certificates for TLS communication.
# CLI Container: Requires access to scripts, chaincode, and cryptographic material to interact with the network for administrative tasks, chaincode installation, and invoking transactions.